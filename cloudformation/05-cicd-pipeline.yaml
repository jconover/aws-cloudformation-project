AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline with CodePipeline and CodeBuild for EKS'

Parameters:
  EnvironmentName:
    Description: Environment name prefix
    Type: String
    Default: devops-portfolio

  GitHubRepo:
    Description: GitHub repository name
    Type: String
    Default: jconover/aws-cloudformation-project

  GitHubBranch:
    Description: GitHub branch name
    Type: String
    Default: main

  GitHubTokenSecretName:
    Description: Name of the AWS Secrets Manager secret containing GitHub token
    Type: String
    Default: github/personal-access-token

Resources:
  # NOTE: GitHubTokenSecret must be created manually using:
  # ./scripts/update-github-token.sh ghp_your_token_here
  # The secret name should match the GitHubTokenSecretName parameter

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-codebuild-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BucketName}/*
                    - BucketName:
                        Fn::ImportValue: !Sub ${EnvironmentName}-ArtifactsBucket
                  - !Sub ${PipelineArtifactBucket.Arn}/*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: '*'
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource:
                  - Fn::ImportValue: !Sub ${EnvironmentName}-EKSClusterArn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::ImportValue: !Sub ${EnvironmentName}-DBSecretArn
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplate
                  - cloudformation:ListStackResources
                Resource: '*'

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-codepipeline-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub ${PipelineArtifactBucket.Arn}/*
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - !GetAtt PipelineArtifactBucket.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt BuildProject.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - Fn::ImportValue: !Sub ${EnvironmentName}-NotificationTopicArn

  # S3 Bucket for Pipeline Artifacts
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-pipeline-artifacts-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CodeBuild Project
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${EnvironmentName}-build
      Description: Build and push Docker image to ECR
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value:
              Fn::ImportValue: !Sub ${EnvironmentName}-ECRRepositoryUri
          - Name: EKS_CLUSTER_NAME
            Value:
              Fn::ImportValue: !Sub ${EnvironmentName}-EKSClusterName
          - Name: ENVIRONMENT
            Value: !Ref EnvironmentName
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub /aws/codebuild/${EnvironmentName}-build
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-build

  # CodeBuild Log Group
  BuildProjectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${EnvironmentName}-build
      RetentionInDays: 7

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvironmentName}-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Select [0, !Split ['/', !Ref GitHubRepo]]
                Repo: !Select [1, !Split ['/', !Ref GitHubRepo]]
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub '{{resolve:secretsmanager:${GitHubTokenSecretName}:SecretString:token}}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput

        # Deploy stage is handled by CodeBuild (see buildspec.yml)
        # CodeBuild deploys directly to EKS using kubectl

        - Name: Notify
          Actions:
            - Name: NotifyAction
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref NotificationFunction
              InputArtifacts:
                - Name: BuildOutput

  # GitHub Webhook
  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: !Sub ${EnvironmentName}-github-webhook
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub '{{resolve:secretsmanager:${GitHubTokenSecretName}:SecretString:token}}'
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: SourceAction
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  # Lambda Function for Pipeline Notifications
  NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-pipeline-notification
      Runtime: python3.11
      Handler: index.lambda_handler
      Role:
        Fn::ImportValue: !Sub ${EnvironmentName}-LambdaExecutionRoleArn
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Fn::ImportValue: !Sub ${EnvironmentName}-NotificationTopicArn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          sns = boto3.client('sns')
          codepipeline = boto3.client('codepipeline')

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")

              job_id = event['CodePipeline.job']['id']

              try:
                  # Extract pipeline details
                  pipeline_name = event['CodePipeline.job']['data']['pipelineName']

                  # Send notification
                  message = f"""
                  Pipeline Execution Completed

                  Pipeline: {pipeline_name}
                  Status: SUCCESS

                  The deployment has been completed successfully.
                  """

                  sns.publish(
                      TopicArn=os.environ['SNS_TOPIC_ARN'],
                      Subject=f'Pipeline {pipeline_name} - Deployment Complete',
                      Message=message
                  )

                  # Signal success to CodePipeline
                  codepipeline.put_job_success_result(jobId=job_id)

                  return {
                      'statusCode': 200,
                      'body': json.dumps('Notification sent successfully')
                  }

              except Exception as e:
                  print(f"Error: {str(e)}")

                  # Signal failure to CodePipeline
                  codepipeline.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                          'message': str(e),
                          'type': 'JobFailed'
                      }
                  )
                  raise

  # Lambda Permission for CodePipeline
  NotificationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationFunction
      Action: lambda:InvokeFunction
      Principal: codepipeline.amazonaws.com
      SourceArn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

  # CloudWatch Event Rule for Pipeline State Changes
  PipelineEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${EnvironmentName}-pipeline-events
      Description: Trigger notifications on pipeline state changes
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - FAILED
            - SUCCEEDED
          pipeline:
            - !Ref Pipeline
      State: ENABLED
      Targets:
        - Arn:
            Fn::ImportValue: !Sub ${EnvironmentName}-NotificationTopicArn
          Id: PipelineNotificationTarget
          InputTransformer:
            InputPathsMap:
              pipeline: $.detail.pipeline
              state: $.detail.state
              execution: $.detail.execution-id
            InputTemplate: |
              "Pipeline <pipeline> execution <execution> has <state>"

Outputs:
  PipelineName:
    Description: CodePipeline name
    Value: !Ref Pipeline
    Export:
      Name: !Sub ${EnvironmentName}-PipelineName

  PipelineUrl:
    Description: CodePipeline URL
    Value: !Sub https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${Pipeline}/view

  BuildProjectName:
    Description: CodeBuild project name
    Value: !Ref BuildProject
    Export:
      Name: !Sub ${EnvironmentName}-BuildProjectName

  PipelineArtifactBucket:
    Description: Pipeline artifact bucket name
    Value: !Ref PipelineArtifactBucket
    Export:
      Name: !Sub ${EnvironmentName}-PipelineArtifactBucket
