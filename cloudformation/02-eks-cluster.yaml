AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Cluster with Managed Node Groups and ECR Repository'

Parameters:
  EnvironmentName:
    Description: Environment name prefix
    Type: String
    Default: devops-portfolio

  ClusterName:
    Description: EKS Cluster name
    Type: String
    Default: devops-portfolio-cluster

  KubernetesVersion:
    Description: Kubernetes version
    Type: String
    Default: '1.34'
    AllowedValues:
      - '1.34'
      - '1.33'
      - '1.32'
      - '1.31'

  NodeInstanceType:
    Description: EC2 instance type for worker nodes
    Type: String
    Default: t3.medium

  NodeGroupDesiredCapacity:
    Description: Desired number of worker nodes
    Type: Number
    Default: 2

  NodeGroupMinSize:
    Description: Minimum number of worker nodes
    Type: Number
    Default: 1

  NodeGroupMaxSize:
    Description: Maximum number of worker nodes
    Type: Number
    Default: 4

Resources:
  # EKS Cluster IAM Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-eks-cluster-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController

  # EKS Cluster Security Group
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-eks-cluster-sg
      GroupDescription: Security group for EKS cluster
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-eks-cluster-sg

  EKSClusterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
      Description: Allow pods to communicate with cluster API

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet1
          - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet2
          - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet3
          - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet1
          - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet2
          - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet3
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  # EKS Node IAM Role
  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-eks-node-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: EKSNodeAdditionalPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeTags
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyVolume
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteVolume
                  - ec2:DetachVolume
                  - ec2:RevokeSecurityGroupIngress
                  - elasticloadbalancing:*
                Resource: '*'

  # EKS Node Security Group
  EKSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-eks-node-sg
      GroupDescription: Security group for EKS worker nodes
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-eks-node-sg
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned

  EKSNodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
      Description: Allow nodes to communicate with each other

  EKSNodeSecurityGroupIngressFromCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
      SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
      Description: Allow worker Kubelets and pods to receive communication from cluster control plane

  EKSNodeSecurityGroupIngressFromClusterAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
      Description: Allow pods running extension API servers to receive communication from cluster control plane

  # EKS Managed Node Group
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      NodegroupName: !Sub ${EnvironmentName}-node-group
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeRole.Arn
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet2
        - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet3
      ScalingConfig:
        DesiredSize: !Ref NodeGroupDesiredCapacity
        MinSize: !Ref NodeGroupMinSize
        MaxSize: !Ref NodeGroupMaxSize
      InstanceTypes:
        - !Ref NodeInstanceType
      AmiType: AL2_x86_64
      DiskSize: 20
      Tags:
        Name: !Sub ${EnvironmentName}-eks-node

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-app
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecr

  # OIDC Provider for EKS (for IRSA - IAM Roles for Service Accounts)
  EKSOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280

  # IAM Role for ALB Ingress Controller
  ALBIngressControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-alb-ingress-controller
      AssumeRolePolicyDocument:
        Fn::Sub:
          - |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "${OIDCProviderArn}"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "${OIDCUrl}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                    }
                  }
                }
              ]
            }
          - OIDCProviderArn: !Ref EKSOIDCProvider
            OIDCUrl: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      Policies:
        - PolicyName: ALBIngressControllerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeTags
                  - ec2:GetCoipPoolUsage
                  - ec2:DescribeCoipPools
                  - elasticloadbalancing:*
                  - cognito-idp:DescribeUserPoolClient
                  - acm:ListCertificates
                  - acm:DescribeCertificate
                  - iam:ListServerCertificates
                  - iam:GetServerCertificate
                  - waf-regional:*
                  - wafv2:*
                  - shield:*
                  - tag:GetResources
                  - tag:TagResources
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                Resource: '*'

  # CloudWatch Log Group for EKS
  EKSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/eks/${ClusterName}/cluster
      RetentionInDays: 7

Outputs:
  EKSClusterName:
    Description: EKS Cluster Name
    Value: !Ref EKSCluster
    Export:
      Name: !Sub ${EnvironmentName}-EKSClusterName

  EKSClusterArn:
    Description: EKS Cluster ARN
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub ${EnvironmentName}-EKSClusterArn

  EKSClusterEndpoint:
    Description: EKS Cluster Endpoint
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub ${EnvironmentName}-EKSClusterEndpoint

  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub ${EnvironmentName}-ECRRepositoryUri

  EKSNodeSecurityGroup:
    Description: Security Group for EKS Nodes
    Value: !Ref EKSNodeSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-EKSNodeSecurityGroup

  EKSClusterSecurityGroup:
    Description: Security Group for EKS Cluster
    Value: !Ref EKSClusterSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-EKSClusterSecurityGroup

  ALBIngressControllerRoleArn:
    Description: IAM Role ARN for ALB Ingress Controller
    Value: !GetAtt ALBIngressControllerRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-ALBIngressControllerRoleArn

  EKSOIDCProviderArn:
    Description: OIDC Provider ARN
    Value: !Ref EKSOIDCProvider
    Export:
      Name: !Sub ${EnvironmentName}-EKSOIDCProviderArn
