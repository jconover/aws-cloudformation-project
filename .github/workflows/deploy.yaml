name: Build and Deploy to EKS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devops-portfolio-app
  EKS_CLUSTER_NAME: devops-portfolio-cluster

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Run linter
        working-directory: ./app
        run: npm run lint || true

      - name: Run tests
        working-directory: ./app
        run: npm test || true

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./app
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.34.0'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          # Get CloudFormation stack outputs
          export DB_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name devops-portfolio-rds-database --query 'Stacks[0].Outputs[?OutputKey==`DBSecretArn`].OutputValue' --output text)
          export SQS_QUEUE_URL=$(aws cloudformation describe-stacks --stack-name devops-portfolio-storage-messaging --query 'Stacks[0].Outputs[?OutputKey==`ProcessingQueueUrl`].OutputValue' --output text)
          export S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name devops-portfolio-storage-messaging --query 'Stacks[0].Outputs[?OutputKey==`StaticContentBucketName`].OutputValue' --output text)
          export IAM_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name devops-portfolio-storage-messaging --query 'Stacks[0].Outputs[?OutputKey==`LambdaExecutionRoleArn`].OutputValue' --output text)

          # Update Kubernetes manifests with environment variables
          export ECR_REPOSITORY_URI=$ECR_REGISTRY/$ECR_REPOSITORY

          # Replace placeholders in deployment manifests
          envsubst < kubernetes/deployment.yaml | kubectl apply -f -
          kubectl apply -f kubernetes/service.yaml
          kubectl apply -f kubernetes/ingress.yaml

          # Wait for rollout to complete
          kubectl rollout status deployment/devops-portfolio-app -n default --timeout=5m

          # Get service endpoint
          kubectl get services devops-portfolio-service -n default

      - name: Verify deployment
        run: |
          kubectl get pods -n default -l app=devops-portfolio
          kubectl get deployments -n default
          kubectl get services -n default

      - name: Send notification
        if: always()
        env:
          SNS_TOPIC_ARN: ${{ secrets.SNS_TOPIC_ARN }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="SUCCESS"
            MESSAGE="Deployment to EKS completed successfully"
          else
            STATUS="FAILED"
            MESSAGE="Deployment to EKS failed"
          fi

          aws sns publish \
            --topic-arn $SNS_TOPIC_ARN \
            --subject "GitHub Actions Deployment - $STATUS" \
            --message "$MESSAGE - Commit: ${{ github.sha }}" \
            --region ${{ env.AWS_REGION }} || true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (IaC Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: cloudformation/
          framework: cloudformation
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run TFSec (Terraform/CloudFormation Security)
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: cloudformation
          soft_fail: true
